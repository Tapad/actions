"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagerDutyForm = void 0;
const pagerduty_create_incident_1 = require("./pagerduty_create_incident");
const moment = require("moment");
const Mustache = require("mustache");
var FormFields;
(function (FormFields) {
    FormFields["ServiceKeyKey"] = "service_key";
    FormFields["DeDeuplicationIdColumnKey"] = "deduplication_id_column";
    FormFields["ScheduleIdKey"] = "schdeule_id";
    FormFields["AutoResolveKey"] = "auto_resolution_boolean";
    FormFields["MaxIncidentsKey"] = "max_incidents";
    FormFields["Summary"] = "summary";
    FormFields["Severity"] = "severity";
    FormFields["Message"] = "message";
})(FormFields || (FormFields = {}));
var Severity;
(function (Severity) {
    Severity["Critical"] = "critical";
    Severity["Error"] = "error";
    Severity["Warning"] = "warning";
    Severity["Info"] = "info";
})(Severity || (Severity = {}));
class PagerDutyForm {
    constructor(service_key, deduplication_id_column, schedule_id, auto_resolution_boolean, max_incidents, summary, severity, message) {
        this.service_key = service_key;
        this.deduplication_id_column = deduplication_id_column;
        this.schedule_id = schedule_id;
        this.auto_resolution_boolean = auto_resolution_boolean;
        this.max_incidents = max_incidents;
        this.summary = summary;
        this.severity = severity;
        this.message = message;
    }
    static jsonToInterface(json) {
        return {
            [FormFields.ServiceKeyKey]: json[FormFields.ServiceKeyKey],
            [FormFields.DeDeuplicationIdColumnKey]: json[FormFields.DeDeuplicationIdColumnKey],
            [FormFields.ScheduleIdKey]: json[FormFields.ScheduleIdKey],
            [FormFields.AutoResolveKey]: Boolean(json[FormFields.AutoResolveKey]),
            [FormFields.MaxIncidentsKey]: Number(json[FormFields.MaxIncidentsKey]),
            [FormFields.Summary]: json[FormFields.Summary],
            [FormFields.Severity]: Severity[json[FormFields.Severity]],
            [FormFields.Message]: json[FormFields.Message]
        };
    }
    static create(json) {
        const inter = this.jsonToInterface(json);
        return new PagerDutyForm(inter[FormFields.ServiceKeyKey], inter[FormFields.DeDeuplicationIdColumnKey], inter[FormFields.ScheduleIdKey], inter[FormFields.AutoResolveKey], inter[FormFields.MaxIncidentsKey], inter[FormFields.Summary], inter[FormFields.Severity], inter[FormFields.Message]);
    }
    createPagerDutyIncidents(resultSet, plan) {
        const details = {
            title: plan.title,
            type: plan.type,
            model: plan.query.model,
            url: plan.query.share_url,
        };
        return resultSet.reduce((acc, el) => {
            if (!Array.isArray(acc))
                return acc;
            if (el[this.deduplication_id_column] == null)
                return {
                    field: FormFields.DeDeuplicationIdColumnKey,
                    message: `Couldn't find column ${this.deduplication_id_column} in result set`
                };
            const templatedMessage = Mustache.render(this.message, el);
            const templatedSummary = Mustache.render(this.summary, el);
            const incident = {
                routing_key: this.service_key,
                event_action: pagerduty_create_incident_1.PagerDutyEventAction.Trigger,
                dedup_key: el[this.deduplication_id_column],
                payload: {
                    summary: templatedSummary,
                    severity: this.severity,
                    source: plan.query.url,
                    timestamp: moment().format(),
                    custom_details: Object.assign(Object.assign(Object.assign({ managed_by_looker: true, auto_resolve: this.auto_resolution_boolean, schedule_id: this.schedule_id }, details), el), { message: templatedMessage })
                },
                client: "Looker",
                client_url: details.url,
                links: [{ href: details.url, text: 'Scheduled query' }],
            };
            return acc.concat([incident]);
        }, []);
    }
}
exports.PagerDutyForm = PagerDutyForm;
PagerDutyForm.formFields = [
    {
        label: 'Service key',
        type: 'string',
        name: FormFields.ServiceKeyKey,
        description: 'An Events API v2 integration key',
        required: true
    }, {
        label: 'De-duplication id column',
        name: FormFields.DeDeuplicationIdColumnKey,
        description: 'Column in the result set that uniquely identifies an alert',
        type: 'string',
        required: true
    }, {
        label: 'Unique name or ID of this schedule',
        name: FormFields.ScheduleIdKey,
        description: 'A value that uniquely identifies this schedule. Used to ensure schedules do not incorrectly resolve alerts generated by other schedules.',
        type: 'string',
        required: true
    }, {
        label: 'Enable automatic resolution',
        name: FormFields.AutoResolveKey,
        description: 'Automatically resolves incidents',
        type: 'string',
        default: 'true',
        required: true
    },
    {
        label: 'Maximum number of incidents',
        name: FormFields.MaxIncidentsKey,
        description: 'Maximum number of incidents to create based on result set',
        type: 'string',
        default: '10',
        required: true
    },
    {
        label: 'Summary',
        name: FormFields.Summary,
        description: 'Incident summary',
        type: 'string',
        required: true
    },
    {
        label: 'Severity',
        name: FormFields.Severity,
        description: 'Severity',
        type: 'select',
        default: "Critical",
        options: Object.keys(Severity).map(k => ({ name: k, label: k })),
        required: true
    },
    {
        label: 'Message',
        name: FormFields.Message,
        description: 'Message',
        type: 'textarea',
        required: true
    },
];
